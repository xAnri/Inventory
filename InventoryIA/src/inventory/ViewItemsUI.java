/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lukef
 */
public class ViewItemsUI extends javax.swing.JDialog {
    //global vars for the dialog
    //var for table
    DefaultTableModel tableModel = new DefaultTableModel();
    
    //initializes the tables headings
    Object[] headings = {"Item Name", "Quantity"};
    
    //Create an instnace variable to hold the items data and populates list, references Item.java
    private ArrayList<Item> items = new ArrayList<Item>();
    
    /**
     * Creates new form ViewItemUI
     */
    public ViewItemsUI(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        //generates the headings in the tableModel
        for(int index = 0; index < headings.length; index++) {
            tableModel.addColumn(headings[index]);
        }
        
        //sets tableItems model as tableModel
        tableItems.setModel(tableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableItems = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        radioButtonSortName = new javax.swing.JRadioButton();
        radioButtonSortAscendingQuantity = new javax.swing.JRadioButton();
        buttonSortList = new javax.swing.JButton();
        radioButtonSortDescendingQuantity = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        buttonExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Troop Inventory");
        setLocation(new java.awt.Point(800, 300));

        tableItems.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane1.setViewportView(tableItems);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Sort Criteria"));
        jPanel1.setToolTipText("");

        buttonGroup1.add(radioButtonSortName);
        radioButtonSortName.setText("Sort By Name");

        buttonGroup1.add(radioButtonSortAscendingQuantity);
        radioButtonSortAscendingQuantity.setText("Sort By Ascending Quantity");

        buttonSortList.setText("Sort List");
        buttonSortList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSortListActionPerformed(evt);
            }
        });

        buttonGroup1.add(radioButtonSortDescendingQuantity);
        radioButtonSortDescendingQuantity.setText("Sort By Descending Quantity");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(buttonSortList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(radioButtonSortAscendingQuantity)
            .addComponent(radioButtonSortDescendingQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(radioButtonSortName)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(radioButtonSortName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioButtonSortAscendingQuantity)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radioButtonSortDescendingQuantity)
                .addGap(18, 18, 18)
                .addComponent(buttonSortList)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("View Items");

        buttonExit.setText("Return to Menu");
        buttonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(buttonExit, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExitActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_buttonExitActionPerformed

    private void buttonSortListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSortListActionPerformed
        // TODO add your handling code here:
        if(radioButtonSortName.isSelected()) sortByItemName();
        else if(radioButtonSortAscendingQuantity.isSelected()) sortByAscendingQuantity();
        else if(radioButtonSortDescendingQuantity.isSelected()) sortByDescendingQuantity();
        updateTable();
    }//GEN-LAST:event_buttonSortListActionPerformed

    //method to get items data from main form, public because accessible by main form
    public void setItems(ArrayList<Item> i) {
        items = i;
        
        //update table
        updateTable();
    }
    
    //method to update the table
    private void updateTable() {
        //Row count is initially zero, because no data
        tableModel.setRowCount(0);
        
        for(int index = 0; index < items.size(); index++) {
            //add to array
            Item i = items.get(index);
            
            //create new rod with the data to be added to table
            Object[] rowData = {i.getItemName(), i.getQuantity()};
            
            //add row data to the table
            tableModel.addRow(rowData);
        }
    }
    
    //method to sort by name
    private void sortByItemName() {
        //outer loop
        for(int i = 0; i < items.size(); i++) {
            Item currentItem = items.get(i); //currentItem is 0
            
            //inner loop stats at i + 1, essentially goes through them one at a time to determine where they go
            for(int j = i + 1; j < items.size(); j ++) {
                Item nextItem = items.get(j); //nextItem would be 1
                
                //compare itemName of item, swap if necessary
                if(nextItem.getItemName().compareToIgnoreCase(currentItem.getItemName()) < 0) {
                    //swap item objects, need a temporary item so none are deleted
                    Item temp = currentItem;
                    //swap objects
                    items.set(i, nextItem);
                    items.set(j, temp);
                    //update currentitem to nextitem
                    currentItem = nextItem;
                }
            }
        }
    }
    
    //Method to sort by ascending quantity
    private void sortByAscendingQuantity() {
        //outer loop
        for(int i = 0; i < items.size(); i++) {
            Item currentItem = items.get(i); //currentItem is 0
            
            //inner loop stats at i + 1, essentially goes through them one at a time to determine where they go
            for(int j = i + 1; j < items.size(); j ++) {
                Item nextItem = items.get(j); //nextItem would be 1
                
                //compare quantity of item, swap if necessary
                if(nextItem.getQuantity() > currentItem.getQuantity()) {
                    //swap item objects, need a temporary item so none are deleted
                    Item temp = currentItem;
                    //swap objects
                    items.set(i, nextItem);
                    items.set(j, temp);
                    //update currentitem to nextitem
                    currentItem = nextItem;
                }
            }
        }
    }
    
    //method to sort by descending quantity
    private void sortByDescendingQuantity() {
        //outer loop
        for(int i = 0; i < items.size(); i++) {
            Item currentItem = items.get(i); //currentItem is 0
            
            //inner loop stats at i + 1, essentially goes through them one at a time to determine where they go
            for(int j = i + 1; j < items.size(); j ++) {
                Item nextItem = items.get(j); //nextItem would be 1
                
                //compare quantity of item, swap if necessary
                if(nextItem.getQuantity() < currentItem.getQuantity()) {
                    //swap item objects, need a temporary item so none are deleted
                    Item temp = currentItem;
                    //swap objects
                    items.set(i, nextItem);
                    items.set(j, temp);
                    //update currentitem to nextitem
                    currentItem = nextItem;
                }
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewItemsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewItemsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewItemsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewItemsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ViewItemsUI dialog = new ViewItemsUI(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonExit;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton buttonSortList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton radioButtonSortAscendingQuantity;
    private javax.swing.JRadioButton radioButtonSortDescendingQuantity;
    private javax.swing.JRadioButton radioButtonSortName;
    private javax.swing.JTable tableItems;
    // End of variables declaration//GEN-END:variables
}
