/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory;
import java.io.*;
import java.util.*;


import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;


/**
 *
 * @author lukef
 */
public class InventoryUI extends javax.swing.JFrame {
    //ArrayList used to stores the items
    ArrayList<Item> items = new ArrayList<Item>();
    //ArrayList for searching 
    ArrayList<Item> searchList = new ArrayList<Item>();
    
    private boolean pressedSearch = false;
    
    //default list model for list boxes
    DefaultListModel listModel = new DefaultListModel();
    /**
     * Creates new form InventoryUI
     */
    public InventoryUI() {
        initComponents(); 
        //sets the listbox on the form
        listItems.setModel(listModel);
        
        //Retrieves the data from the file
        ReadFromFile(); 

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listItems = new javax.swing.JList<>();
        buttonViewItems = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        textFieldItemName = new javax.swing.JTextField();
        buttonSearch = new javax.swing.JButton();
        buttonEditItem = new javax.swing.JButton();
        buttonDeleteItem = new javax.swing.JButton();
        buttonResetSearch = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuItemDeleteItem = new javax.swing.JMenu();
        menuItemAddItem = new javax.swing.JMenuItem();
        menuItemExportToFile = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuItemExitProgram = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Troop Inventory");
        setLocation(new java.awt.Point(800, 300));
        setName("Inventory UI"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        listItems.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listItemsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listItems);

        buttonViewItems.setText("View Items");
        buttonViewItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewItemsActionPerformed(evt);
            }
        });

        jLabel1.setText("Search by Item Name");

        buttonSearch.setText("Search");
        buttonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSearchActionPerformed(evt);
            }
        });

        buttonEditItem.setText("Edit Item");
        buttonEditItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditItemActionPerformed(evt);
            }
        });

        buttonDeleteItem.setText("Delete Item");
        buttonDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteItemActionPerformed(evt);
            }
        });

        buttonResetSearch.setText("Reset Search");
        buttonResetSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonResetSearchActionPerformed(evt);
            }
        });

        menuItemDeleteItem.setText("File");

        menuItemAddItem.setText("Add Item");
        menuItemAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAddItemActionPerformed(evt);
            }
        });
        menuItemDeleteItem.add(menuItemAddItem);

        menuItemExportToFile.setText("Export to File");
        menuItemExportToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExportToFileActionPerformed(evt);
            }
        });
        menuItemDeleteItem.add(menuItemExportToFile);
        menuItemDeleteItem.add(jSeparator1);

        menuItemExitProgram.setText("Exit Program");
        menuItemExitProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitProgramActionPerformed(evt);
            }
        });
        menuItemDeleteItem.add(menuItemExitProgram);

        jMenuBar1.add(menuItemDeleteItem);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(buttonViewItems, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonEditItem, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonDeleteItem, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(textFieldItemName)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonResetSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(textFieldItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSearch)
                    .addComponent(buttonResetSearch))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonViewItems, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonEditItem, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonDeleteItem, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuItemAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAddItemActionPerformed
        //Opens up a new instance of hte add item ui
        AddItemUI addDlg = new AddItemUI(this, true);
        addDlg.setVisible(true);
        
        //Essentially a check to make sure save button was pressed
        if(addDlg.isPressedSave()) {
            //get data from additemui dialog
            String in = addDlg.getItemName();
            int q = addDlg.getQuantity();
            String d = addDlg.getDescription();
            
            //creates a new instance of the item object
            Item i = new Item(in, q, d);
            
            //Adds new instance to the arraylist var items
            items.add(i);
            
            //saves data to file
            WriteToFile();
            
            //updates 
            listModel.addElement(addDlg.getItemName());
        }
    }//GEN-LAST:event_menuItemAddItemActionPerformed

    private void menuItemExitProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExitProgramActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_menuItemExitProgramActionPerformed

    private void buttonViewItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewItemsActionPerformed
        // TODO add your handling code here:
        //creates var for dialog form
        ViewItemsUI viewDlg = new ViewItemsUI(this, true);
        
        //gives info of items data to viewDlg
        viewDlg.setItems(items);
        
        //displays dialog
        viewDlg.setVisible(true);
    }//GEN-LAST:event_buttonViewItemsActionPerformed

    private void buttonEditItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditItemActionPerformed
        // TODO add your handling code here:
        //if/else to ensure an item is selected
        if(listItems.getSelectedIndex() != -1 && pressedSearch == false){
            EditItemUI editDlg = new EditItemUI(this, true);
            int number = listItems.getSelectedIndex();

            //gives info of items data to editDlg
           
            editDlg.setItems(items);
           
               
            
            
            //give index of the item to the editDlg form
            editDlg.setIndex(number);
            
            editDlg.setVisible(true);
            
            //if for saving data and transferring to form
            if(editDlg.isPressedEditSave()) {
                //removes the previous list item
                items.remove(number);
                
                //gets values from edit item form
                String nin = editDlg.getNewItemName();
                int nq = editDlg.getNewQuantity();
                String nd = editDlg.getNewDescription();
                
                //creates an instance of the item object
                Item i = new Item(nin, nq, nd);
            
                //Adds new instance to the arraylist var items
                items.add(number,i);
                
                //SAVES DATA 
                WriteToFile();
            }
        }else if(listItems.getSelectedIndex() != -1 && pressedSearch == true){
            EditItemUI editDlg = new EditItemUI(this, true);
            int number = listItems.getSelectedIndex();

            //gives info of items data to editDlg
         
           
                editDlg.setItems(searchList);
            
            
            //give index of the item to the editDlg form
            editDlg.setIndex(number);
            
            editDlg.setVisible(true);
            
            //if for saving data and transferring to form
            if(editDlg.isPressedEditSave()) {
                //removes the previous list item
                items.remove(number+1);
                
                //gets values from edit item form
                String nin = editDlg.getNewItemName();
                int nq = editDlg.getNewQuantity();
                String nd = editDlg.getNewDescription();
                
                //creates an instance of the item object
                Item i = new Item(nin, nq, nd);
            
                //Adds new instance to the arraylist var items
                items.add(number+1,i);
                
                //SAVES DATA 
                WriteToFile();
            }
        }
        else {
            //dialog box saying to pick an item to edit
            showMessageDialog(null, "Please choose an item to edit.");
        }
    }//GEN-LAST:event_buttonEditItemActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        listModel.clear();
        for(int index = 0; index < items.size(); index++) {
            Item i = items.get(index);
            listModel.addElement(i.getItemName());
        }
        
        textFieldItemName.setText("");
        pressedSearch = false;
    }//GEN-LAST:event_formWindowActivated

    private void buttonDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteItemActionPerformed
        // TODO add your handling code here:
        if(listItems.getSelectedIndex() == -1){
            //dialog box saying to pick an item to edit
            showMessageDialog(null, "Please choose an item to delete.");
        } else{
        //show a confirmation dialog
        int dialogButton = JOptionPane.YES_NO_OPTION;
        JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this item", "Warning", dialogButton);
        
        //if they press yes
        if(dialogButton == JOptionPane.YES_OPTION) {
            //delete item from itemlist
            items.remove(listItems.getSelectedIndex());
            
            //saves
            WriteToFile();
            //auto closes       
        } 
        }
    }//GEN-LAST:event_buttonDeleteItemActionPerformed

    private void buttonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSearchActionPerformed
        // TODO add your handling code here:
        search();
        updateListBox();
        pressedSearch = true;
    }//GEN-LAST:event_buttonSearchActionPerformed

    private void buttonResetSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonResetSearchActionPerformed
        // TODO add your handling code here:
        //clears the list items
        listModel.clear();
        
        //resets the textfield to be empty
        textFieldItemName.setText("");
        
        //repopulates the listbox
        for(int index = 0; index < items.size(); index++) {
            Item i = items.get(index);
            listModel.addElement(i.getItemName());
        }
        pressedSearch = false;
    }//GEN-LAST:event_buttonResetSearchActionPerformed

    private void menuItemExportToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemExportToFileActionPerformed
        // TODO add your handling code here:
                // when the export all menu strip item is called
       JFileChooser c = new JFileChooser();
      // show "Save" dialog:
      int rVal = c.showSaveDialog(this);
      if (rVal == JFileChooser.APPROVE_OPTION) {
          //user said yes to saving the recipes to file, call the appropriate methods
          //ensure that the selected file name is not blank
          if(!c.getSelectedFile().getName().equalsIgnoreCase("")){
            String outputLocation = c.getCurrentDirectory().toString() + "\\" +  c.getSelectedFile().getName();
            //make sure it becomes a .txt file
            if(!outputLocation.substring(outputLocation.length() - 4).equalsIgnoreCase(".txt")){
                outputLocation += ".txt";
            }
            ExportToFile(outputLocation);
          }
          //otherwise we just close
      }
    }//GEN-LAST:event_menuItemExportToFileActionPerformed

    private void listItemsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listItemsValueChanged
        // TODO add your handling code here:
        if(listItems.getSelectedIndex() != -1){ 
            
        }
    }//GEN-LAST:event_listItemsValueChanged

    //method for updating list box
    private void updateListBox() {
        //clear the list model so only the new items appear in the list
        listModel.clear();
        
        for(Item i : searchList) {
            //looks for items then updates the list box
            String item = i.getItemName();
            listModel.addElement(item);
        }
    }
    
    //method for searching by item name
    public void search() {
        //clears previous seared items
        searchList.clear();
        listItems.removeAll();
        //get the desired item name
        String itemName = textFieldItemName.getText();
        //loop through arraylist to find matches
        for(Item i : items) {
            //regex short for regular expression
            String regex = "(.*)" + itemName.toUpperCase() + "(.*)";
            //comparing using the matches method
            //adding items to list
            if(i.getItemName().toUpperCase().matches(regex)) {
                //add item objects to the searchlist
                searchList.add(i);
            }
        }     
    }
    
    //method to deserialize from the items.dat file
    public void ReadFromFile() {
        try{
        //create file stream
        FileInputStream fileIn = new FileInputStream("items.dat");
        ObjectInputStream in = new ObjectInputStream(fileIn);
        //deserializes and goes to ArrayList<Item>
        //assigns to items var
        items = (ArrayList<Item>)in.readObject();
        //close streams
        fileIn.close();
        in.close();
        } catch(IOException i){
        } catch(ClassNotFoundException c) {
            System.out.println("Item class not found");
        }
    }
    
    //method to serialize to the items.dat file
    public void WriteToFile() {
        try { 
        //create file stream
        FileOutputStream fileOut = new FileOutputStream("items.dat");
        ObjectOutputStream out = new ObjectOutputStream(fileOut);
        //write the items to file
        out.writeObject(items);
        out.close();
        fileOut.close();
        System.out.printf("Serialized data is saved in items.dat");
        } catch(IOException i) {
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InventoryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InventoryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InventoryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InventoryUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InventoryUI().setVisible(true);
            }
        });
    }

    public void ExportToFile(String path){
        try{
            //create the new file
            File outFile = new File(path);
            outFile.createNewFile();
            PrintWriter output = new PrintWriter(outFile);
            //now output each recipe as a string, from the search
            for(Item i : items){
                output.println(i.toString());
                output.println("");
                output.println("--------------------------------------------------------");
                output.println("");
            }
            output.close();
        } catch (IOException ex1) {
            showMessageDialog(null, "File write failed!");
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonDeleteItem;
    private javax.swing.JButton buttonEditItem;
    private javax.swing.JButton buttonResetSearch;
    private javax.swing.JButton buttonSearch;
    private javax.swing.JButton buttonViewItems;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JList<String> listItems;
    private javax.swing.JMenuItem menuItemAddItem;
    private javax.swing.JMenu menuItemDeleteItem;
    private javax.swing.JMenuItem menuItemExitProgram;
    private javax.swing.JMenuItem menuItemExportToFile;
    private javax.swing.JTextField textFieldItemName;
    // End of variables declaration//GEN-END:variables
}
